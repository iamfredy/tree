{"version":3,"sources":["components/ActionClusterChart.jsx","PrettyPrintJson.jsx","JSONReader.js","App.js","index.js"],"names":["flowStyles","height","background","width","onLoad","reactFlowInstance","fitView","padding","includeHiddenNodes","ActionClusterChart","props","console","log","data","className","nodeTypes","elements","style","text","PrettyPrintJson","color","border","backgroundColor","JSON","stringify","JSONReader","useState","prettyJSON","setPrettyJSON","nodeData","setNodeData","isChartLoaded","setisChartLoaded","showModal","setShowModal","levelVsNumberOfNodes","Map","jsonArr","edges","getJSONObjFromNode","node","x","y","level","jsonData","nodeId","automationAction","mappingId","id","type","nodeType","executionType","position","pushToLevelVsChildrenMap","push","children","childActions","parentID","childY","childIndex","randomColor","luminosity","forEach","child","childLevel","noOfChildrenInLevel","has","get","length","childX","childMappingId","edgeJSON","source","target","animated","stroke","currentNodesInLevel","indexOf","set","Modal","Dialog","Header","Title","Body","Footer","Button","variant","onClick","value","rows","cols","placeholder","onChange","event","json","parse","error","message","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09a86ced.chunk.js","sourcesContent":["import React from 'react'\nimport ReactFlow, { Background } from 'react-flow-renderer'\nconst flowStyles = { height: 700,background:\"white\",width:1376 };\n\n\nconst onLoad = (reactFlowInstance) => {\n    reactFlowInstance.fitView({ padding: 0.1, includeHiddenNodes: true });\n};\n\nfunction ActionClusterChart(props) {\n    console.log(props.data);\n    return (\n        <div className=\"polka-dot\">\n            <ReactFlow onLoad={onLoad} nodeTypes={\"output\"} elements={props.data}  style={flowStyles} data={{text:'hello'}}>\n                <Background />\n            </ReactFlow>\n        </div>\n    )\n}\n\nexport default ActionClusterChart\n","import React from 'react'\n  \nexport default function PrettyPrintJson(props) {\n    console.log(props.data);\n    return (\n    <div style={{color:'Gray',border:'solid',backgroundColor:'white'}}>\n        <pre>{ JSON.stringify(props.data, null, 2) }</pre>\n    </div>);\n}\n","import React, { useState } from 'react'\nimport { Button, Modal } from 'react-bootstrap';\nimport ActionClusterChart from './components/ActionClusterChart';\nimport PrettyPrintJson from './PrettyPrintJson'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport randomColor  from 'randomcolor';\n\n\nexport default function JSONReader() {\n\n    const [prettyJSON,setPrettyJSON]=useState({});\n    const [nodeData, setNodeData] = useState([]);\n    const [isChartLoaded, setisChartLoaded] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n    function populatePayload(event){\n        try {\n            const json=JSON.parse(event.target.value);\n            setPrettyJSON(json);       \n        } catch (error) {\n            setPrettyJSON({message:\"Invalid JSON\"});\n        }\n    }\n\n\n    let levelVsNumberOfNodes = new Map();\n    let jsonArr=[];\n    let edges=[];\n    const NODE_WIDTH=400;\n    const NODE_HEIGHT=300;\n    \n    const loadData=()=>{\n        jsonArr=[];\n        edges=[];\n        // var yPosition=NODE_HEIGHT*(levelVsNumberOfNodes.size+1);\n        //TODO Need to Calculate the starting Y position for each ROOT node\n        try {\n            prettyJSON.forEach((node)=>{\n                getJSONObjFromNode(node,100,5,1);\n                })\n                jsonArr.push(...edges);\n                setNodeData(jsonArr);\n                setisChartLoaded(true);\n        } catch (error) {\n            console.log(\"Invalid Action Cluster JSON\");\n            setShowModal(true);\n        }\n\n\n    }\n\n    \nconst getJSONObjFromNode=(node,x,y,level)=>{\n  let jsonData={};\n  \n  const nodeId=node.automationAction.mappingId;\n  jsonData.id=nodeId;\n  jsonData.type=\"input\";\n  jsonData.data={\n    //   \"label\":node.nodeType+\"_\"+node.automationAction.executionType+\"_\"+node.automationAction.mappingId\n    \"label\": (\n        <>\n          Node Type:<strong>{node.nodeType}</strong>\n          <br/>\n          Mapping ID:<strong>{node.automationAction.mappingId}</strong>\n          <br/>\n          ExecutionType :<strong>{node.automationAction.executionType}</strong>\n        </>\n      )\n    };\n  jsonData.position={x,y};\n  if(node.nodeType===\"ROOT\"){\n    jsonData.style= { background: '#18e3ed', width: 200 };\n  }\n  else if(node.nodeType===\"SUCCESS\"){\n    jsonData.style= { background: '#84e384', width: 200};\n  }\n  else if(node.nodeType===\"FAILURE\"){\n    jsonData.style= { background: '#f86d6d', width: 200 };\n  }\n  else{\n    jsonData.style= { background: '#ffff74', width: 200,color:'blue' };\n  }\n\n  pushToLevelVsChildrenMap(level,node.automationAction.mappingId);\n  jsonArr.push(jsonData);\n  const children=node.childActions;\n  const parentID=node.automationAction.mappingId;\n//   const childY=150*(level)+(150*levelVsNumberOfNodes.size+1);\n  const childY=NODE_HEIGHT*(level);\n  var childIndex=0;\n  var color = randomColor({luminosity: 'dark'});\n  children.forEach((child)=>{\n      childIndex++;\n      const childLevel=level+1;\n      pushToLevelVsChildrenMap(childLevel,child.automationAction.mappingId);\n      const noOfChildrenInLevel=levelVsNumberOfNodes.has(childLevel)?levelVsNumberOfNodes.get(childLevel).length:1;\n      var childX=NODE_WIDTH*noOfChildrenInLevel;\n      if(childIndex!==noOfChildrenInLevel){\n        childX=childX+10;\n      }\n      const childMappingId=child.automationAction.mappingId;\n\n      getJSONObjFromNode(child,childX,childY,childLevel);\n      var edgeJSON={};\n      edgeJSON.id=\"e\"+parentID+\"-\"+childMappingId;\n      edgeJSON.source=parentID;\n      edgeJSON.target=childMappingId;\n      edgeJSON.type=\"step\";\n      edgeJSON.animated= true;\n      edgeJSON.style={ stroke: color };\n      edges.push(edgeJSON);\n  });\n}\n\nconst pushToLevelVsChildrenMap=(level,nodeId)=>{\n    var currentNodesInLevel=levelVsNumberOfNodes.has(level)?levelVsNumberOfNodes.get(level):[];\n    if(currentNodesInLevel.indexOf(nodeId)===-1){\n      currentNodesInLevel=[...currentNodesInLevel,nodeId];\n    }\n    levelVsNumberOfNodes.set(level,currentNodesInLevel);\n  }\n    \n  if(showModal){\n    return (\n        <Modal.Dialog>\n            <Modal.Header>\n                <Modal.Title>Invalid Action Cluster Payload</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <p>The JSON passed is not a valid Action Cluster payload</p>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={()=>{setShowModal(false)}}>Close</Button>\n            </Modal.Footer>\n            </Modal.Dialog>\n        )\n  }\n\n\n\n    if(isChartLoaded){\n        return(\n        <div>    \n            <div className=\"row\">\n                <Button type=\"button\" value=\"Submit JSON\" onClick={()=>{setisChartLoaded(false)}}>Hide Chart</Button>\n            </div>    \n            <br/>     \n            <div className=\"row\">\n                <ActionClusterChart className=\"col-sm-6\"  data={nodeData}></ActionClusterChart>\n            </div>\n          </div>\n        )\n        \n    }\n    else{\n        return (    \n        <div> \n            <h1 className=\"text-secondary\">Action Cluster Visualizer</h1>            \n            <textarea rows=\"4\" cols=\"100\" type=\"textarea\" placeholder=\"Enter Action Cluster JSON payload Here\" onChange={populatePayload}></textarea >\n            <br/>\n            <Button type=\"button\" value=\"Submit JSON\" onClick={loadData}>Load Acton Cluster Chart</Button>\n            <div className=\"row\">\n                {<PrettyPrintJson className=\"col-sm-6\" data={prettyJSON} ></PrettyPrintJson>}   \n            </div>\n          </div>\n        )\n    }\n}\n","import React from 'react';\nimport JSONReader from './JSONReader';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JSONReader></JSONReader>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}