{"version":3,"sources":["components/ActionClusterChart.jsx","PrettyPrintJson.jsx","components/GoJSComponent.jsx","JSONReader.js","App.js","index.js"],"names":["flowStyles","height","background","width","onLoad","reactFlowInstance","fitView","padding","includeHiddenNodes","ActionClusterChart","props","console","log","data","nodeTypes","elements","style","text","PrettyPrintJson","color","border","backgroundColor","JSON","stringify","initDiagram","$","go","make","diagram","model","nodeTemplate","font","stroke","isMultiline","margin","linkTemplate","routing","AvoidsNodes","curve","JumpOver","toArrow","strokeWidth","layout","handleModelChange","changes","GoJSComponent","divClassName","nodeDataArray","onModelChange","JSONReader","useState","prettyJSON","setPrettyJSON","nodeData","setNodeData","chartLoaded","setChartLoaded","showModal","setShowModal","levelVsNumberOfNodes","Map","jsonArr","edges","nodesForGoJS","getJSONObjFromNode","node","x","y","level","jsonData","nodeId","automationAction","mappingId","id","type","nodeType","executionType","position","pushToLevelVsChildrenMap","push","children","childActions","parentID","childY","childIndex","randomColor","luminosity","forEach","child","childLevel","noOfChildrenInLevel","has","get","length","childX","childMappingId","edgeJSON","source","target","animated","currentNodesInLevel","indexOf","set","getJSONObjFromNodeForGOJS","parent","key","loc","Modal","Dialog","Header","Title","Body","Footer","Button","variant","onClick","className","Table","bordered","hover","borderColor","name","clusterID","rows","cols","placeholder","onChange","event","json","parse","value","error","message","actions","undefined","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.903e2f98.chunk.js","sourcesContent":["import React from 'react'\nimport ReactFlow, { Background } from 'react-flow-renderer'\nconst flowStyles = { height: 700,background:\"white\",width:1376 };\n\n\nconst onLoad = (reactFlowInstance) => {\n    reactFlowInstance.fitView({ padding: 0.1, includeHiddenNodes: true });\n};\n\nfunction ActionClusterChart(props) {\n    console.log(props.data);\n    return (\n        <div>\n            <ReactFlow onLoad={onLoad} nodeTypes={\"output\"} elements={props.data}  style={flowStyles} data={{text:'hello'}}>\n                <Background />\n            </ReactFlow>\n        </div>\n    )\n}\n\nexport default ActionClusterChart\n","import React from 'react'\n  \nexport default function PrettyPrintJson(props) {\n    console.log(props.data);\n    return (\n    <div style={{color:'Gray',border:'solid',backgroundColor:'white'}}>\n        <pre>{ JSON.stringify(props.data, null, 2) }</pre>\n    </div>);\n}\n","import * as go from 'gojs';\nimport { ReactDiagram } from 'gojs-react';\nimport React from 'react'\n\n\nlet treeNodeData=[\n    {\n        \"key\": \"<h1>Hello</h1>\",\n        \"text\": \"ROOT\\nSYNC\\n4000000261003\",\n        \"loc\": \"100 5\",\n        \"color\":\"green\"\n    },    \n    {\n        \"key\": \"4000000261003\",\n        \"text\": \"ROOT_SYNC_4000000261003\",\n        \"loc\": \"100 5\",\n        \"color\":\"red\"\n    },\n    {\n        \"key\": \"4000000261001\",\n        \"text\": \"SUCCESS_SYNC_4000000261001\",\n        \"loc\": \"250 150\",\n        \"parent\": \"4000000261003\"\n    },\n    {\n        \"key\": \"4000000261007\",\n        \"text\": \"DEFAULT_SYNC_4000000261007\",\n        \"loc\": \"500 150\",\n        \"parent\": \"4000000261003\"\n    },\n    {\n        \"key\": \"4000000261005\",\n        \"text\": \"SUCCESS_SYNC_4000000261005\",\n        \"loc\": \"250 300\",\n        \"parent\": \"4000000261007\"\n    },\n    {\n        \"key\": \"4000000261011\",\n        \"text\": \"FAILURE_SYNC_4000000261011\",\n        \"loc\": \"500 300\",\n        \"parent\": \"4000000261007\"\n    },\n    {\n        \"key\": \"4000000261009\",\n        \"text\": \"DEFAULT_SYNC_4000000261009\",\n        \"loc\": \"750 150\",\n        \"parent\": \"4000000261003\"\n    },\n    {\n        \"key\": \"4000000261377\",\n        \"text\": \"FAILURE_ASYNC_4000000261377\",\n        \"loc\": \"750 300\",\n        \"parent\": \"4000000261009\"\n    },\n    {\n        \"key\": \"4000000266666\",\n        \"text\": \"DEFAULT_SYNC_4000000266666\",\n        \"loc\": \"1000 150\",\n        \"parent\": \"4000000261003\"\n    }\n];\n\nfunction initDiagram() {\nconst $ = go.GraphObject.make;\nconst diagram =$(go.Diagram,{'undoManager.isEnabled': true,\n'clickCreatingTool.archetypeNodeData': { text: 'new node', color: 'lightblue' }\n,model: $(go.TreeModel)});\n  \n    // define a simple Node template\n    diagram.nodeTemplate =\n    //   $(go.Node, 'Auto',\n    //     new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify),\n    //     $(go.Shape, 'RoundedRectangle', { name: 'SHAPE', fill: 'blue', strokeWidth: 2 },new go.Binding('fill', 'color')),\n    //     $(go.TextBlock,{ margin: 8, editable: true },new go.Binding('text').makeTwoWay())\n    //     // $(go.TextBlock, { text: \"Hello World\", stroke: \"gray\" })\n    //   );\n    diagram.nodeTemplate =\n    $(go.Node, \"Auto\",\n      $(go.Shape, \"RoundedRectangle\"),\n      $(go.TextBlock,new go.Binding(\"text\", \"text\"),textStyle(),{isMultiline:true,margin:8})\n    );\n    // diagram.linkTemplate =$(go.Link,{ routing: go.Link.Orthogonal, corner: 5 },$(go.Shape,{fill: \"red\",strokeWidth: 2 }));\n    diagram.linkTemplate =\n    $(go.Link,\n        {\n            routing: go.Link.AvoidsNodes,\n            curve: go.Link.JumpOver\n          },\n      $(go.Shape, { toArrow: 'Standard',strokeWidth: 3  })\n    );\n    diagram.layout = $(go.TreeLayout);\n    return diagram;\n  }\n\n\n  /**\n * This function handles any changes to the GoJS model.\n * It is here that you would make any updates to your React state, which is dicussed below.\n */\nfunction handleModelChange(changes) {\n    console.log(changes);\n}\n  \nfunction textStyle() {\n    return {\n      font: \"bold 11pt Lato, Helvetica, Arial, sans-serif\",\n      stroke: \"white\"\n    }\n  }\n\nexport default function GoJSComponent(props) {\n    console.log(props);\n    return (\n        <div>\n        <ReactDiagram\n          initDiagram={initDiagram}\n          divClassName='diagram-component'\n          nodeDataArray={props.data}\n          onModelChange={handleModelChange}\n        />\n      </div>\n    )\n}\n","import React, { useState } from 'react'\nimport { Button, Modal, Table } from 'react-bootstrap';\nimport ActionClusterChart from './components/ActionClusterChart';\nimport PrettyPrintJson from './PrettyPrintJson'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport randomColor  from 'randomcolor';\nimport GoJSComponent from './components/GoJSComponent';\n\n\nexport default function JSONReader() {\n\n    const [prettyJSON,setPrettyJSON]=useState({});\n    const [nodeData, setNodeData] = useState([]);\n    const [chartLoaded, setChartLoaded] = useState(\"\");\n    const [showModal, setShowModal] = useState(false);\n\n    function populatePayload(event){\n        try {\n            const json=JSON.parse(event.target.value);\n            setPrettyJSON(json);       \n        } catch (error) {\n            setPrettyJSON({message:\"Invalid JSON\"});\n        }\n    }\n\n\n    let levelVsNumberOfNodes = new Map();\n    let jsonArr=[];\n    let edges=[];\n    const NODE_WIDTH=400;\n    const NODE_HEIGHT=300;\n    let nodesForGoJS=[];\n    \n    const loadData=()=>{\n        jsonArr=[];\n        edges=[];\n        // var yPosition=NODE_HEIGHT*(levelVsNumberOfNodes.size+1);\n        //TODO Need to Calculate the starting Y position for each ROOT node\n        try {\n\n            var nodesJSON=prettyJSON.actions;          \n            nodesJSON.forEach((node)=>{\n                getJSONObjFromNode(node,100,5,1);\n                })\n                jsonArr.push(...edges);\n                setNodeData(jsonArr);\n                setChartLoaded(\"REACT_FLOW\");\n        } catch (error) {\n            console.log(\"Invalid Action Cluster JSON\");\n            setShowModal(true);\n        }\n\n\n    }\n\n    \nconst getJSONObjFromNode=(node,x,y,level)=>{\n  let jsonData={};\n  \n  const nodeId=node.automationAction.mappingId;\n  jsonData.id=nodeId;\n  jsonData.type=\"input\";\n  jsonData.data={\n    //   \"label\":node.nodeType+\"_\"+node.automationAction.executionType+\"_\"+node.automationAction.mappingId\n    \"label\": (\n        <>\n          Node Type:<strong>{node.nodeType}</strong>\n          <br/>\n          Mapping ID:<strong>{node.automationAction.mappingId}</strong>\n          <br/>\n          ExecutionType :<strong>{node.automationAction.executionType}</strong>\n        </>\n      )\n    };\n  jsonData.position={x,y};\n  if(node.nodeType===\"ROOT\"){\n    jsonData.style= { background: '#18e3ed', width: 200 };\n  }\n  else if(node.nodeType===\"SUCCESS\"){\n    jsonData.style= { background: '#84e384', width: 200};\n  }\n  else if(node.nodeType===\"FAILURE\"){\n    jsonData.style= { background: '#f86d6d', width: 200 };\n  }\n  else{\n    jsonData.style= { background: '#ffff74', width: 200,color:'blue' };\n  }\n\n  pushToLevelVsChildrenMap(level,node.automationAction.mappingId);\n  jsonArr.push(jsonData);\n  const children=node.childActions;\n  const parentID=node.automationAction.mappingId;\n//   const childY=150*(level)+(150*levelVsNumberOfNodes.size+1);\n  const childY=NODE_HEIGHT*(level);\n  var childIndex=0;\n  var color = randomColor({luminosity: 'dark'});\n  children.forEach((child)=>{\n      childIndex++;\n      const childLevel=level+1;\n      pushToLevelVsChildrenMap(childLevel,child.automationAction.mappingId);\n      const noOfChildrenInLevel=levelVsNumberOfNodes.has(childLevel)?levelVsNumberOfNodes.get(childLevel).length:1;\n      var childX=NODE_WIDTH*noOfChildrenInLevel;\n      if(childIndex!==noOfChildrenInLevel){\n        childX=childX+10;\n      }\n      const childMappingId=child.automationAction.mappingId;\n\n      getJSONObjFromNode(child,childX,childY,childLevel);\n      var edgeJSON={};\n      edgeJSON.id=\"e\"+parentID+\"-\"+childMappingId;\n      edgeJSON.source=parentID;\n      edgeJSON.target=childMappingId;\n      edgeJSON.type=\"step\";\n      edgeJSON.animated= true;\n      edgeJSON.style={ stroke: color };\n      edges.push(edgeJSON);\n  });\n}\n\nconst pushToLevelVsChildrenMap=(level,nodeId)=>{\n    var currentNodesInLevel=levelVsNumberOfNodes.has(level)?levelVsNumberOfNodes.get(level):[];\n    if(currentNodesInLevel.indexOf(nodeId)===-1){\n      currentNodesInLevel=[...currentNodesInLevel,nodeId];\n    }\n    levelVsNumberOfNodes.set(level,currentNodesInLevel);\n  }\n\nconst loadDataForGoJS=()=>{\n  nodesForGoJS=[];\n  // var yPosition=NODE_HEIGHT*(levelVsNumberOfNodes.size+1);\n  //TODO Need to Calculate the starting Y position for each ROOT node\n  try {\n      var nodesJSON=prettyJSON.actions; \n      nodesJSON.forEach((node)=>{\n        getJSONObjFromNodeForGOJS(node,100,5,1,undefined);\n      });\n      console.log(nodesForGoJS);\n      setNodeData(nodesForGoJS);\n      setChartLoaded(\"GOJS\");\n  } catch (error) {\n      console.log(\"Invalid Action Cluster JSON\");\n      setShowModal(true);\n  }\n}\n\n\nconst getJSONObjFromNodeForGOJS=(node,x,y,level,parent)=>{\n  let jsonData={};\n  const nodeId=node.automationAction.mappingId;\n  jsonData.key=nodeId;\n  jsonData.text= node.nodeType+\"\\n\"+node.automationAction.executionType+\"\\n\"+node.automationAction.mappingId;\n  jsonData.loc=x+\" \"+y;\n\n  if(node.nodeType===\"ROOT\"){\n    jsonData.color=\"yellow\"\n  }\n  else if(node.nodeType===\"SUCCESS\"){\n    jsonData.color= \"green\"\n  }\n  else if(node.nodeType===\"FAILURE\"){\n    jsonData.color= \"red\"\n  }\n  else{\n    jsonData.color= \"blue\"\n  }\n  if(parent){\n    jsonData.parent=parent;\n  }\n\n  pushToLevelVsChildrenMap(level,node.automationAction.mappingId);\n  nodesForGoJS.push(jsonData);\n  const children=node.childActions;\n  const parentID=node.automationAction.mappingId;\n//   const childY=150*(level)+(150*levelVsNumberOfNodes.size+1);\n  const childY=NODE_HEIGHT*(level);\n  var childIndex=0;\n  children.forEach((child)=>{\n      childIndex++;\n      const childLevel=level+1;\n      pushToLevelVsChildrenMap(childLevel,child.automationAction.mappingId);\n      const noOfChildrenInLevel=levelVsNumberOfNodes.has(childLevel)?levelVsNumberOfNodes.get(childLevel).length:1;\n      var childX=NODE_WIDTH*noOfChildrenInLevel;\n      if(childIndex!==noOfChildrenInLevel){\n        childX=childX+10;\n      }\n      getJSONObjFromNodeForGOJS(child,childX,childY,childLevel,parentID);\n  });\n}\n\n    \n  if(showModal){\n    return (\n        <Modal.Dialog>\n            <Modal.Header>\n                <Modal.Title>Invalid Action Cluster Payload</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <p>The JSON passed is not a valid Action Cluster payload</p>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={()=>{setShowModal(false)}}>Close</Button>\n            </Modal.Footer>\n            </Modal.Dialog>\n        )\n  }\n\n\n\n    if(chartLoaded!==\"\"){\n        return(\n        <div>    \n            <div className=\"row\">\n                <Button type=\"button\" onClick={()=>{setChartLoaded(\"\")}}>Hide Chart</Button>\n            </div>    \n            <br/>     \n            <div className=\"row\">\n                {chartLoaded!==\"\" &&\n                <div>\n                    <Table  bordered hover>\n                      <tbody style={{color:'gray',borderColor:\"whitesmoke\"}} >\n                        <tr>\n                          <td>Cluster Name</td>\n                          <td>{prettyJSON.name}</td>\n                        </tr>\n                        <tr>\n                          <td>Cluster ID</td>\n                          <td>{prettyJSON.clusterID}</td>\n                        </tr>\n                        <tr>\n                          <td>Cluster Type</td>\n                          <td>{prettyJSON.type}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                </div>\n                \n                }\n                {chartLoaded===\"REACT_FLOW\" && <ActionClusterChart className=\"col-sm-6\"  data={nodeData}></ActionClusterChart>}}\n                {chartLoaded===\"GOJS\" &&  <GoJSComponent className=\"col-sm-6\"  data={nodeData}></GoJSComponent>}\n\n            </div>\n          </div>\n        )\n        \n    }\n    else{\n        return (    \n        <div> \n            <h1 className=\"text-secondary\">Action Cluster Visualizer</h1>            \n            <textarea rows=\"6\" cols=\"200\" type=\"textarea\" placeholder=\"Enter Action Cluster JSON payload Here\" onChange={populatePayload}></textarea >\n            <br/>\n            <div className=\"row\">\n              <Button className=\"col-sm-6\" type=\"button\"  variant=\"outline-info\" onClick={loadDataForGoJS}>Visualize using GOJS</Button>           \n              <Button className=\"col-sm-6\" type=\"button\" variant=\"outline-success\" onClick={loadData}>Visualize using React Flow</Button>\n            </div>\n            <div className=\"row\">\n                {<PrettyPrintJson className=\"col-sm-6\" data={prettyJSON} ></PrettyPrintJson>}   \n            </div>\n          </div>\n        )\n    }\n}\n","import React from 'react';\nimport JSONReader from './JSONReader';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JSONReader></JSONReader>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}